// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(clientffiFFI)
import clientffiFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_clientffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_clientffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol GreeterProtocol : AnyObject {
    
    func greet()  -> String
    
}
public class Greeter:
    GreeterProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_clientffi_fn_clone_greeter(self.pointer, $0) }
    }
    public convenience init(name: String)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_clientffi_fn_constructor_greeter_new(
        FfiConverterString.lower(name),$0)
})
    }

    deinit {
        try! rustCall { uniffi_clientffi_fn_free_greeter(pointer, $0) }
    }

    

    
    
    public func greet()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_clientffi_fn_method_greeter_greet(self.uniffiClonePointer(), $0
    )
}
        )
    }

}

public struct FfiConverterTypeGreeter: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Greeter

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Greeter {
        return Greeter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Greeter) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Greeter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Greeter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeGreeter_lift(_ pointer: UnsafeMutableRawPointer) throws -> Greeter {
    return try FfiConverterTypeGreeter.lift(pointer)
}

public func FfiConverterTypeGreeter_lower(_ value: Greeter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeGreeter.lower(value)
}


public struct BbsBoundProofGenMessageDto {
    public var reveal: Bool
    public var value: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        reveal: Bool, 
        value: Data) {
        self.reveal = reveal
        self.value = value
    }
}


extension BbsBoundProofGenMessageDto: Equatable, Hashable {
    public static func ==(lhs: BbsBoundProofGenMessageDto, rhs: BbsBoundProofGenMessageDto) -> Bool {
        if lhs.reveal != rhs.reveal {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(reveal)
        hasher.combine(value)
    }
}


public struct FfiConverterTypeBbsBoundProofGenMessageDto: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BbsBoundProofGenMessageDto {
        return
            try BbsBoundProofGenMessageDto(
                reveal: FfiConverterBool.read(from: &buf), 
                value: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: BbsBoundProofGenMessageDto, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.reveal, into: &buf)
        FfiConverterData.write(value.value, into: &buf)
    }
}


public func FfiConverterTypeBbsBoundProofGenMessageDto_lift(_ buf: RustBuffer) throws -> BbsBoundProofGenMessageDto {
    return try FfiConverterTypeBbsBoundProofGenMessageDto.lift(buf)
}

public func FfiConverterTypeBbsBoundProofGenMessageDto_lower(_ value: BbsBoundProofGenMessageDto) -> RustBuffer {
    return FfiConverterTypeBbsBoundProofGenMessageDto.lower(value)
}


public struct BbsBoundProofVerifyMessageDto {
    public var index: Int32
    public var value: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        index: Int32, 
        value: Data) {
        self.index = index
        self.value = value
    }
}


extension BbsBoundProofVerifyMessageDto: Equatable, Hashable {
    public static func ==(lhs: BbsBoundProofVerifyMessageDto, rhs: BbsBoundProofVerifyMessageDto) -> Bool {
        if lhs.index != rhs.index {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(index)
        hasher.combine(value)
    }
}


public struct FfiConverterTypeBbsBoundProofVerifyMessageDto: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BbsBoundProofVerifyMessageDto {
        return
            try BbsBoundProofVerifyMessageDto(
                index: FfiConverterInt32.read(from: &buf), 
                value: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: BbsBoundProofVerifyMessageDto, into buf: inout [UInt8]) {
        FfiConverterInt32.write(value.index, into: &buf)
        FfiConverterData.write(value.value, into: &buf)
    }
}


public func FfiConverterTypeBbsBoundProofVerifyMessageDto_lift(_ buf: RustBuffer) throws -> BbsBoundProofVerifyMessageDto {
    return try FfiConverterTypeBbsBoundProofVerifyMessageDto.lift(buf)
}

public func FfiConverterTypeBbsBoundProofVerifyMessageDto_lower(_ value: BbsBoundProofVerifyMessageDto) -> RustBuffer {
    return FfiConverterTypeBbsBoundProofVerifyMessageDto.lower(value)
}


public struct BbsKeyPairDto {
    public var bbsPublicKey: Data
    public var bbsSecretKey: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        bbsPublicKey: Data, 
        bbsSecretKey: Data) {
        self.bbsPublicKey = bbsPublicKey
        self.bbsSecretKey = bbsSecretKey
    }
}


extension BbsKeyPairDto: Equatable, Hashable {
    public static func ==(lhs: BbsKeyPairDto, rhs: BbsKeyPairDto) -> Bool {
        if lhs.bbsPublicKey != rhs.bbsPublicKey {
            return false
        }
        if lhs.bbsSecretKey != rhs.bbsSecretKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bbsPublicKey)
        hasher.combine(bbsSecretKey)
    }
}


public struct FfiConverterTypeBbsKeyPairDto: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BbsKeyPairDto {
        return
            try BbsKeyPairDto(
                bbsPublicKey: FfiConverterData.read(from: &buf), 
                bbsSecretKey: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: BbsKeyPairDto, into buf: inout [UInt8]) {
        FfiConverterData.write(value.bbsPublicKey, into: &buf)
        FfiConverterData.write(value.bbsSecretKey, into: &buf)
    }
}


public func FfiConverterTypeBbsKeyPairDto_lift(_ buf: RustBuffer) throws -> BbsKeyPairDto {
    return try FfiConverterTypeBbsKeyPairDto.lift(buf)
}

public func FfiConverterTypeBbsKeyPairDto_lower(_ value: BbsKeyPairDto) -> RustBuffer {
    return FfiConverterTypeBbsKeyPairDto.lower(value)
}


public struct BlsKeyPairDto {
    public var blsPublicKey: Data
    public var blsSecretKey: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        blsPublicKey: Data, 
        blsSecretKey: Data) {
        self.blsPublicKey = blsPublicKey
        self.blsSecretKey = blsSecretKey
    }
}


extension BlsKeyPairDto: Equatable, Hashable {
    public static func ==(lhs: BlsKeyPairDto, rhs: BlsKeyPairDto) -> Bool {
        if lhs.blsPublicKey != rhs.blsPublicKey {
            return false
        }
        if lhs.blsSecretKey != rhs.blsSecretKey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(blsPublicKey)
        hasher.combine(blsSecretKey)
    }
}


public struct FfiConverterTypeBlsKeyPairDto: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlsKeyPairDto {
        return
            try BlsKeyPairDto(
                blsPublicKey: FfiConverterData.read(from: &buf), 
                blsSecretKey: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: BlsKeyPairDto, into buf: inout [UInt8]) {
        FfiConverterData.write(value.blsPublicKey, into: &buf)
        FfiConverterData.write(value.blsSecretKey, into: &buf)
    }
}


public func FfiConverterTypeBlsKeyPairDto_lift(_ buf: RustBuffer) throws -> BlsKeyPairDto {
    return try FfiConverterTypeBlsKeyPairDto.lift(buf)
}

public func FfiConverterTypeBlsKeyPairDto_lower(_ value: BlsKeyPairDto) -> RustBuffer {
    return FfiConverterTypeBlsKeyPairDto.lower(value)
}


public struct Example {
    public var items: [String]
    public var value: Double?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        items: [String], 
        value: Double?) {
        self.items = items
        self.value = value
    }
}


extension Example: Equatable, Hashable {
    public static func ==(lhs: Example, rhs: Example) -> Bool {
        if lhs.items != rhs.items {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(items)
        hasher.combine(value)
    }
}


public struct FfiConverterTypeExample: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Example {
        return
            try Example(
                items: FfiConverterSequenceString.read(from: &buf), 
                value: FfiConverterOptionDouble.read(from: &buf)
        )
    }

    public static func write(_ value: Example, into buf: inout [UInt8]) {
        FfiConverterSequenceString.write(value.items, into: &buf)
        FfiConverterOptionDouble.write(value.value, into: &buf)
    }
}


public func FfiConverterTypeExample_lift(_ buf: RustBuffer) throws -> Example {
    return try FfiConverterTypeExample.lift(buf)
}

public func FfiConverterTypeExample_lower(_ value: Example) -> RustBuffer {
    return FfiConverterTypeExample.lower(value)
}


public enum ClientFfiError {

    
    
    case IntegerOverflow(message: String)
    
    case BbsBoundFixedSize(message: String)
    
    case BbsBoundBlsKeyPopGen(message: String)
    
    case BbsBoundBlsKeyPopVerify(message: String)
    
    case BbsBoundSign(message: String)
    
    case BbsBoundVerify(message: String)
    
    case BbsBoundProofGen(message: String)
    
    case BbsBoundProofVerify(message: String)
    

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeClientFFIError.lift(error)
    }
}


public struct FfiConverterTypeClientFFIError: FfiConverterRustBuffer {
    typealias SwiftType = ClientFfiError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClientFfiError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .IntegerOverflow(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .BbsBoundFixedSize(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .BbsBoundBlsKeyPopGen(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .BbsBoundBlsKeyPopVerify(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .BbsBoundSign(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .BbsBoundVerify(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .BbsBoundProofGen(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .BbsBoundProofVerify(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ClientFfiError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .IntegerOverflow(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .BbsBoundFixedSize(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .BbsBoundBlsKeyPopGen(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .BbsBoundBlsKeyPopVerify(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .BbsBoundSign(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .BbsBoundVerify(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .BbsBoundProofGen(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .BbsBoundProofVerify(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))

        
        }
    }
}


extension ClientFfiError: Equatable, Hashable {}

extension ClientFfiError: Error { }

fileprivate struct FfiConverterOptionDouble: FfiConverterRustBuffer {
    typealias SwiftType = Double?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDouble.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDouble.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeBbsKeyPairDto: FfiConverterRustBuffer {
    typealias SwiftType = BbsKeyPairDto?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeBbsKeyPairDto.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeBbsKeyPairDto.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeBlsKeyPairDto: FfiConverterRustBuffer {
    typealias SwiftType = BlsKeyPairDto?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeBlsKeyPairDto.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeBlsKeyPairDto.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceData: FfiConverterRustBuffer {
    typealias SwiftType = [Data]

    public static func write(_ value: [Data], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterData.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Data] {
        let len: Int32 = try readInt(&buf)
        var seq = [Data]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterData.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeBbsBoundProofGenMessageDto: FfiConverterRustBuffer {
    typealias SwiftType = [BbsBoundProofGenMessageDto]

    public static func write(_ value: [BbsBoundProofGenMessageDto], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeBbsBoundProofGenMessageDto.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [BbsBoundProofGenMessageDto] {
        let len: Int32 = try readInt(&buf)
        var seq = [BbsBoundProofGenMessageDto]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeBbsBoundProofGenMessageDto.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeBbsBoundProofVerifyMessageDto: FfiConverterRustBuffer {
    typealias SwiftType = [BbsBoundProofVerifyMessageDto]

    public static func write(_ value: [BbsBoundProofVerifyMessageDto], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeBbsBoundProofVerifyMessageDto.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [BbsBoundProofVerifyMessageDto] {
        let len: Int32 = try readInt(&buf)
        var seq = [BbsBoundProofVerifyMessageDto]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeBbsBoundProofVerifyMessageDto.read(from: &buf))
        }
        return seq
    }
}
public func add(a: UInt64, b: UInt64)  -> UInt64 {
    return try!  FfiConverterUInt64.lift(
        try! rustCall() {
    uniffi_clientffi_fn_func_add(
        FfiConverterUInt64.lower(a),
        FfiConverterUInt64.lower(b),$0)
}
    )
}
public func bbsBoundBbsKeyPair(ikmIn: Data, keyInfo: Data)  -> BbsKeyPairDto? {
    return try!  FfiConverterOptionTypeBbsKeyPairDto.lift(
        try! rustCall() {
    uniffi_clientffi_fn_func_bbs_bound_bbs_key_pair(
        FfiConverterData.lower(ikmIn),
        FfiConverterData.lower(keyInfo),$0)
}
    )
}
public func bbsBoundBlsKeyPair(ikmIn: Data, keyInfo: Data)  -> BlsKeyPairDto? {
    return try!  FfiConverterOptionTypeBlsKeyPairDto.lift(
        try! rustCall() {
    uniffi_clientffi_fn_func_bbs_bound_bls_key_pair(
        FfiConverterData.lower(ikmIn),
        FfiConverterData.lower(keyInfo),$0)
}
    )
}
public func bbsBoundBlsKeyPopGen(blsSecretKey: Data, aud: Data, dst: Data?, extraInfo: Data?) throws  -> Data {
    return try  FfiConverterData.lift(
        try rustCallWithError(FfiConverterTypeClientFFIError.lift) {
    uniffi_clientffi_fn_func_bbs_bound_bls_key_pop_gen(
        FfiConverterData.lower(blsSecretKey),
        FfiConverterData.lower(aud),
        FfiConverterOptionData.lower(dst),
        FfiConverterOptionData.lower(extraInfo),$0)
}
    )
}
public func bbsBoundBlsKeyPopVerify(blsKeyPop: Data, blsPublicKey: Data, aud: Data, dst: Data?, extraInfo: Data?) throws  -> Bool {
    return try  FfiConverterBool.lift(
        try rustCallWithError(FfiConverterTypeClientFFIError.lift) {
    uniffi_clientffi_fn_func_bbs_bound_bls_key_pop_verify(
        FfiConverterData.lower(blsKeyPop),
        FfiConverterData.lower(blsPublicKey),
        FfiConverterData.lower(aud),
        FfiConverterOptionData.lower(dst),
        FfiConverterOptionData.lower(extraInfo),$0)
}
    )
}
public func bbsBoundProofGen(bbsPublicKey: Data, blsSecretKey: Data, header: Data, messages: [BbsBoundProofGenMessageDto], signature: Data, presentationHeader: Data?) throws  -> Data {
    return try  FfiConverterData.lift(
        try rustCallWithError(FfiConverterTypeClientFFIError.lift) {
    uniffi_clientffi_fn_func_bbs_bound_proof_gen(
        FfiConverterData.lower(bbsPublicKey),
        FfiConverterData.lower(blsSecretKey),
        FfiConverterData.lower(header),
        FfiConverterSequenceTypeBbsBoundProofGenMessageDto.lower(messages),
        FfiConverterData.lower(signature),
        FfiConverterOptionData.lower(presentationHeader),$0)
}
    )
}
public func bbsBoundProofVerify(bbsPublicKey: Data, header: Data, messages: [BbsBoundProofVerifyMessageDto], proof: Data, presentationHeader: Data?) throws  -> Bool {
    return try  FfiConverterBool.lift(
        try rustCallWithError(FfiConverterTypeClientFFIError.lift) {
    uniffi_clientffi_fn_func_bbs_bound_proof_verify(
        FfiConverterData.lower(bbsPublicKey),
        FfiConverterData.lower(header),
        FfiConverterSequenceTypeBbsBoundProofVerifyMessageDto.lower(messages),
        FfiConverterData.lower(proof),
        FfiConverterOptionData.lower(presentationHeader),$0)
}
    )
}
public func bbsBoundSign(bbsSecretKey: Data, bbsPublicKey: Data, blsPublicKey: Data, header: Data, messages: [Data]) throws  -> Data {
    return try  FfiConverterData.lift(
        try rustCallWithError(FfiConverterTypeClientFFIError.lift) {
    uniffi_clientffi_fn_func_bbs_bound_sign(
        FfiConverterData.lower(bbsSecretKey),
        FfiConverterData.lower(bbsPublicKey),
        FfiConverterData.lower(blsPublicKey),
        FfiConverterData.lower(header),
        FfiConverterSequenceData.lower(messages),$0)
}
    )
}
public func bbsBoundVerify(bbsPublicKey: Data, blsSecretKey: Data, header: Data, messages: [Data], signature: Data) throws  -> Bool {
    return try  FfiConverterBool.lift(
        try rustCallWithError(FfiConverterTypeClientFFIError.lift) {
    uniffi_clientffi_fn_func_bbs_bound_verify(
        FfiConverterData.lower(bbsPublicKey),
        FfiConverterData.lower(blsSecretKey),
        FfiConverterData.lower(header),
        FfiConverterSequenceData.lower(messages),
        FfiConverterData.lower(signature),$0)
}
    )
}
public func checkedAdd(a: UInt64, b: UInt64) throws  -> UInt64 {
    return try  FfiConverterUInt64.lift(
        try rustCallWithError(FfiConverterTypeClientFFIError.lift) {
    uniffi_clientffi_fn_func_checked_add(
        FfiConverterUInt64.lower(a),
        FfiConverterUInt64.lower(b),$0)
}
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_clientffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_clientffi_checksum_func_add() != 17605) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_clientffi_checksum_func_bbs_bound_bbs_key_pair() != 50881) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_clientffi_checksum_func_bbs_bound_bls_key_pair() != 14679) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_clientffi_checksum_func_bbs_bound_bls_key_pop_gen() != 59493) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_clientffi_checksum_func_bbs_bound_bls_key_pop_verify() != 39953) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_clientffi_checksum_func_bbs_bound_proof_gen() != 25995) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_clientffi_checksum_func_bbs_bound_proof_verify() != 32758) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_clientffi_checksum_func_bbs_bound_sign() != 40546) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_clientffi_checksum_func_bbs_bound_verify() != 17553) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_clientffi_checksum_func_checked_add() != 10556) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_clientffi_checksum_method_greeter_greet() != 39154) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_clientffi_checksum_constructor_greeter_new() != 44559) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}